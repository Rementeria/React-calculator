{"version":3,"sources":["components/Calculator.js","components/DisplayPanel.js","components/NumericKeys.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","initialValue","useState","panel","setPanel","useEffect","numericButtons","numbers","i","push","className","onClick","e","target","value","key","arithmeticCheck","test","length","slice","Panel","Buttons","eval","includes","String","err","DisplayPanel","NumericKeys","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.61818dea.chunk.js","sourcesContent":["//This is the base of everything\nimport React, { useState, useEffect } from \"react\";\nimport DisplayPanel from \"./DisplayPanel\";\nimport NumericKeys from \"./NumericKeys\";\nimport \"./Calculator.css\";\n\nfunction Calculator({ initialValue }) {\n  const [panel, setPanel] = useState(initialValue);\n  useEffect(() => {\n    if (initialValue === \"\") {\n      setPanel(\"0\");\n    }\n  }, [initialValue]);\n  const numericButtons = () => {\n    const numbers = [];\n    for (let i = 9; i >= 0; i--) {\n      numbers.push(\n        <button\n          className=\"btn btn-outline-dark mx-2\"\n          onClick={(e) =>\n            panel === \"\" || panel === \"0\"\n              ? setPanel(e.target.value)\n              : setPanel(panel + e.target.value)\n          }\n          value={i}\n          key={i}\n        >\n          {i}\n        </button>\n      );\n    }\n    return numbers;\n  };\n\n  const arithmeticCheck = (e) => {\n    //https://stackoverflow.com/questions/32311081/check-for-special-characters-in-string\n    //regex taken from this site\n    let format = /[*+-/]+/;\n    format.test(panel[panel.length - 1])\n      ? setPanel(panel.slice(0, -1) + e)\n      : setPanel(panel + e);\n  };\n\n  return (\n    <div className=\"container center-text\">\n      <div className=\"display-panel my-2\">\n        <DisplayPanel Panel={panel} />\n      </div>\n      <div className=\"operations my-2\">\n        <button\n          className=\"btn btn-danger\"\n          onClick={(e) => {\n            setPanel(e.target.value);\n          }}\n          value={\"0\"}\n        >\n          AC\n        </button>\n        <button\n          className=\"btn btn-warning\"\n          onClick={(e) => {\n            panel.length > 1 ? setPanel(panel.slice(0, -1)) : setPanel(\"0\");\n          }}\n          value={\"\"}\n        >\n          &#60;\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          value=\"+\"\n          onClick={(e) => {\n            arithmeticCheck(e.target.value);\n          }}\n        >\n          +\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          value=\"-\"\n          key=\"-\"\n          onClick={(e) => {\n            arithmeticCheck(e.target.value);\n          }}\n        >\n          -\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          value=\"*\"\n          key=\"*\"\n          onClick={(e) => {\n            arithmeticCheck(e.target.value);\n          }}\n        >\n          *\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          value=\"/\"\n          key=\"/\"\n          onClick={(e) => {\n            arithmeticCheck(e.target.value);\n          }}\n        >\n          /\n        </button>\n      </div>\n      <div className=\"numbers my-2\">\n        <NumericKeys className=\"numbers\" Buttons={numericButtons()} />\n        <button\n          className=\"btn btn-outline-dark mx-2\"\n          onClick={(e) =>\n            // setPanel(panel + e.target.value)\n            panel === initialValue\n              ? setPanel(e.target.value)\n              : setPanel(panel + e.target.value)\n          }\n          value=\".\"\n          key=\".\"\n        >\n          .\n        </button>\n      </div>\n      <div className=\"result\">\n        <button\n          className=\"btn btn-success\"\n          //https://stackoverflow.com/questions/6479236/calculate-string-value-in-javascript-not-using-eval\n          onClick={(e) => {\n            try {\n              setPanel(\n                eval(panel).length > 3 && eval(panel).includes(\".\")\n                  ? String(eval(panel))\n                  : String(eval(panel))\n              );\n            } catch (err) {\n              setPanel(\"Error, please press AC\");\n            }\n          }}\n          value=\"=\"\n        >\n          =\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","//Display panel that show the result of every operation\nimport React from \"react\";\n\nfunction DisplayPanel({ Panel }) {\n  return <div className=\"container text-center\">{Panel}</div>;\n}\n\nexport default DisplayPanel;\n","//Here goes every number key and dot (.) key\nimport React from \"react\";\n\nfunction NumericKeys({ Buttons }) {\n  return <>{Buttons}</>;\n}\n\nexport default NumericKeys;\n","import React from \"react\";\nimport Calculator from \"./components/Calculator\";\n//import \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"container text-center\">\n      <>\n        <h1 className=\"h1 mt-5\">Calculator</h1>\n        <p className=\"lead\">\n          Created to qualify for \"Entry\" position at 23People\n        </p>\n      </>\n      <>\n        <Calculator initialValue={\"0\"} />\n      </>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}